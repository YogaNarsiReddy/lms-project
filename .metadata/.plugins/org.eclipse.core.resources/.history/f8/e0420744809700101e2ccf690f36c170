package com.klef.sdp.service;

import com.klef.sdp.entity.Course;
import com.klef.sdp.entity.ForumPost;
import com.klef.sdp.entity.User;
import com.klef.sdp.repository.CourseRepository;
import com.klef.sdp.repository.ForumPostRepository;
import com.klef.sdp.repository.UserRepository;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import java.time.LocalDateTime;
import java.util.List;

@Service
public class ForumService {

    @Autowired
    private ForumPostRepository forumPostRepository;

    @Autowired
    private CourseRepository courseRepository;

    @Autowired
    private UserRepository userRepository;

    @Autowired
    private CourseService courseService;

    public List<ForumPost> getPostsByCourse(Long courseId) {
        return forumPostRepository.findByCourseId(courseId);
    }

    public ForumPost createPost(Long courseId, ForumPost post, Long userId) {
        if (!courseService.isEnrolledOrInstructor(courseId, userId)) {
            throw new RuntimeException("Unauthorized: User is not enrolled or instructor");
        }
        User user = userRepository.findById(userId).orElseThrow(() -> new RuntimeException("User not found"));
        Course course = courseRepository.findById(courseId).orElseThrow(() -> new RuntimeException("Course not found"));
        post.setAuthor(user);
        post.setCourse(course);
        post.setCreatedAt(LocalDateTime.now());
        return forumPostRepository.save(post);
    }

    public ForumPost createReply(Long courseId, Long postId, ForumPost reply, Long userId) {
        if (!courseService.isEnrolledOrInstructor(courseId, userId)) {
            throw new RuntimeException("Unauthorized: User is not enrolled or instructor");
        }
        User user = userRepository.findById(userId).orElseThrow(() -> new RuntimeException("User not found"));
        Course course = courseRepository.findById(courseId).orElseThrow(() -> new RuntimeException("Course not found"));
        ForumPost parentPost = forumPostRepository.findById(postId).orElseThrow(() -> new RuntimeException("Post not found"));
        reply.setAuthor(user);
        reply.setCourse(course);
        reply.setParentPost(parentPost);
        reply.setCreatedAt(LocalDateTime.now());
        return forumPostRepository.save(reply);
    }
}